(function(angular) {
  "use strict";

  angular.module('app', [
  	'ui.router',
  	'ui.utils.masks',
  	'angular-table',
  	'ui.bootstrap',
  	'angular-md5'
  ])

})(window.angular);

(function(angular) {
	'use strict';

	var api	= {};

	api.baseUrl = '/api/';

	api.cars = resourceOf('cars');

	angular.module('app').constant('API', api);

	function resourceOf(resourceName) {
		return api.baseUrl + resourceName + '.json';
	}

})(angular);

(function(angular) {
	'use strict';

	var CAR_PLATE_PATTERN = /^(\w\w\w)-?(\d\d\d\d)$/;

	angular.module('app').constant('CAR_PLATE_PATTERN', CAR_PLATE_PATTERN);

})(angular);

(function(angular) {
	'use strict';

	var list = ['Gasolina', 'Álcool', 'Diesel', 'Flex'];

	angular.module('app').constant('FUEL_LIST', list);

})(angular);

(function(angular) {
	"use strict";
	angular
		.module('app')
		.config(defineRoutes);

	defineRoutes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];

	function defineRoutes ($stateProvider, $urlRouterProvider, $locationProvider) {
		$locationProvider
			.html5Mode({
				enabled: true,
				requireBase: false
			}).hashPrefix('!');

		$urlRouterProvider.otherwise('/');

		$stateProvider
			.state('home', {
				url:'/',
				views: {
					'': {
						templateUrl: '/views/car/list.html',
						controller: 'ListController as listCtrl',

					},
					'navbar@home': { templateUrl: '/views/common/navbar.html' }
				}
			})
			.state('add', {
				url:'/novo',
				views: {
					'': {
						templateUrl: '/views/car/add.html',
						controller: 'FormController as formCtrl',

					},
					'navbar@add': { templateUrl: '/views/common/navbar.html' }
				}
			})
			.state('update', {
				url:'/editar/:id',
				views: {
					'': {
						templateUrl: '/views/car/add.html',
						controller: 'FormController as formCtrl',

					},
					'navbar@update': { templateUrl: '/views/common/navbar.html' }
				}
			})
	}
})(window.angular);
(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('FormController', FormController);

	FormController.$inject = ['$scope', 'GarageService', 'ModalService', '$state', '$stateParams'];

	function FormController($scope, GarageService, ModalService, $state, $stateParams) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		vm.car = GarageService.car;
		vm.cars = GarageService.cars;

		/**
		 * Controller methods.
		 */
		vm.persist = persist;
		vm.cancel = cancel;

		/**
		 * Public functions (exposed by methods).
		 */
		function persist(car) {
			GarageService.persist(car).then(successAddCbk, errorAddCbk);
		}

		function cancel(car) {
			GarageService.resetCar();
			$state.go('home');
		}

		/**
		 * Private functions (not exposed).
		 */
		function successAddCbk(res) {
			ModalService.open({
				title: 'Sucesso!',
				message: res.message,
				status: 'success',
				afterClose: function() {
					$state.go('home');
				}
			})
		}

		function errorAddCbk(res) {
			ModalService.open({
				title: 'Erro!',
				status: 'danger',
				message: res.message,
			})
		}

		GarageService.getAll();
		GarageService.get($stateParams.id);

		$scope.$on('$destroy', GarageService.resetCar);
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('ListController', ListController);

	ListController.$inject = ['GarageService', 'ModalService', '$state'];

	function ListController(GarageService, ModalService, $state) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		vm.cars = GarageService.cars;
		vm.carFilter;

		/**
		 * Controller methods.
		 */
		vm.setCarFilter = setCarFilter;
		vm.remove = remove;
		vm.update = update;
		vm.showImage = showImage;
		vm.selectedItemsCount = selectedItemsCount;

		/**
		 * Public functions (exposed by methods).
		 */
		function setCarFilter(query) {
			vm.carFilter = query;
		}

		function remove() {
			GarageService.remove(selectedItems()).then(successRemoveCbk, errorRemoveCbk);

		}

		function update() {
			$state.go('update', { id: selectedItems()[0].id })
		}

		function showImage(car) {
			ModalService.open({
				title: car.modelo,
				image: car.imagem
			})
		}

		function selectedItemsCount() {
			return selectedItems().length;
		}

		/**
		 * Private functions (not exposed).
		 */
		function successRemoveCbk(res) {
			ModalService.open({
				title: 'Sucesso!',
				message: res.message,
				afterClose: function() {
					$state.go('home');
				}
			})
		}

		function errorRemoveCbk(res) {
			ModalService.open({
				title: 'Erro!',
				message: res.message,
			})
		}

		function selectedItems() {
			return vm.cars.filter(function(car) {
				return car.selected;
			})
		}

		GarageService.getAll();
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('ModalController', ModalController);

	ModalController.$inject = ['ModalService'];

	function ModalController(ModalService) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		vm.title = ModalService.modal.title;
		vm.message = ModalService.modal.message;
		vm.image = ModalService.modal.image;
		vm.status = ModalService.modal.status;

		/**
		 * Controller methods.
		 */
		vm.close = ModalService.close;
	}

})(window.angular);

(function(angular) {
	'use strict';

	angular
	.module('app')
	.directive('carForm', carForm)

	carForm.$inject = ['FUEL_LIST'];

	function carForm(FUEL_LIST) {

		return {

			restrict: 'E',
			templateUrl: '/views/directives/car-form.html',
			scope: {},

			link: function($scope, elem, attrs) {
				$scope.fuelList = FUEL_LIST;
			},

			controller: 'FormController as formCtrl'
		};
	}

})(window.angular);

(function(angular) {
	'use strict';

	angular
	.module('app')
	.directive('carList', carList)

	carList.$inject = ['$filter'];

	function carList($filter) {

		return {

			restrict: 'E',
			templateUrl: '/views/directives/car-list.html',
			scope: {
				filter: '=',
				items: '=',
				showImage: '=',
			},

			link: function($scope, elem, attrs) {

				$scope.filteredItems = $scope.items;
				$scope.list = { selectAll: false }
				$scope.config = {
					itemsPerPage: 5,
					fillLastPage: false,
					maxPages: 5,
					paginatorLabels: {
						first: "‹‹‹",
						last: "›››",
						jumpAhead: "››",
						jumpBack: "‹‹",
						stepAhead: "›",
						stepBack: "‹",
					}
				}
			},

			controller: function($scope) {

				$scope.$watch('filter', changeFilter);
				function changeFilter(value) {
					$scope.filteredItems = $filter("carFilter")($scope.items, $scope.filter);
				}

				$scope.toggleCheckboxes = toggleCheckboxes;
				function toggleCheckboxes(selectAll) {
					$scope.filteredItems.forEach(function(item) {
						item.selected = selectAll;
					})
				}

				$scope.$watch('filteredItems', toggleSelectAll, true);
				function toggleSelectAll() {
					var count = $scope.filteredItems.filter(function(item) {
							return item.selected;
						}).length,
						isAllChecked = count == $scope.filteredItems.length;

					$scope.list.selectAll = isAllChecked;
				}
			}
		};
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
	.module("app")
	.filter('carFilter', [carFilter]);

	function carFilter () {
		return function(input, string) {

			if ( ! (string))
				return input;

			var output = [],
				_query = string.toLowerCase();

			angular.forEach(input, function(car) {

				if (
					car.marca.toLowerCase().indexOf(_query) >= 0
					||
					car.combustivel.toLowerCase().indexOf(_query) >= 0
				) {
					output.push(car);
				}
			});

			return output;
		};
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
	.module("app")
	.filter('carPlateView', carPlateView);

	carPlateView.$inject = ['ForwardAgent'];

	function carPlateView (ForwardAgent) {
		return function(input) {

			return ForwardAgent.toView(input);
		};
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
	.module("app")
	.filter('dash', [dash]);

	function dash () {
		return function(input) {

			if ( ! input)
				return '-';

			return input;
		};
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.service('ApiService', ApiService);

	ApiService.$inject = ['API', '$http'];

	function ApiService (API, $http) {

		/**
		 * Me.
		 */
		var self = this;

		/**
		 * Service methods.
		 */
		self.getCars = getCars;
		function getCars() {
			return $http.get(API.cars);
		}

		/**
		 * angular.service returns a NEW INSTANCE,
		 * instead function return, like angular.factory.
		 * This way there's no need to return anything, once
		 * everything appended to 'this' will be available at the instance.
		 */
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.factory('ForwardAgent', ForwardAgent);

	ForwardAgent.$inject = ['CAR_PLATE_PATTERN'];

	function ForwardAgent(CAR_PLATE_PATTERN) {

		/**
		 * Me.
		 */
		var svc = {};

		/**
		 * Service methods.
		 */
		svc.toApi = toApi;
		svc.toView = toView;
		svc.validate = validate;

		/**
		 * Public functions (exposed by methods).
		 */
		function toApi(_string) {

			var PATTERN = CAR_PLATE_PATTERN,
				parts = PATTERN.exec(_string);

			return parts[1] + '-' + parts[2];
		}

		function toView(_string) {

			var PATTERN = CAR_PLATE_PATTERN,
				parts = PATTERN.exec(_string);

			return parts[1] + parts[2];
		}

		function validate(_string) {

			var PATTERN = CAR_PLATE_PATTERN;

			return PATTERN.test(_string);
		}

		/**
		 * Return me.
		 *
		 * angular.factory gives the return of function,
		 * instead a NEW instance, like angular.service.
		 */
		return svc;
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.factory('GarageService', GarageService);

	GarageService.$inject = ['ApiService', 'ForwardAgent', '$q', 'md5'];

	function GarageService(ApiService, ForwardAgent, $q, md5) {

		/**
		 * Me.
		 */
		var svc = {};

		/**
		 * Service properties.
		 */
		svc.cars = [];
		svc.car = {};

		/**
		 * Service methods.
		 */
		svc.getAll = getAll;
		svc.get = get;
		svc.persist = persist;
		svc.remove = remove;
		svc.resetCar = resetCar;

		/**
		 * Public functions (exposed by methods).
		 */
		function getAll(clearCache) {

			var defer = $q.defer();

			if (svc.cars.length && !clearCache) {
				defer.resolve(svc.cars);
				return defer.promise;
			}

			ApiService.getCars().then(function(res){
				angular.copy(res.data, svc.cars);
				svc.cars.forEach(function(car) {
					car.id = md5.createHash(car.placa);
				})
				defer.resolve(svc.cars);
			}, function(res) { console.log(res); defer.reject(res) });

			return defer.promise;
		}

		function get(id) {

			var defer = $q.defer(),
				existentCar = getBy('id', id, svc.cars);

			if (existentCar) {
				svc.car = angular.copy(existentCar);
			}

			defer.resolve(svc.car);
			return defer.promise;
		}

		function persist(car) {

			var validation = validate(car);

			if ( ! validation.status) {
				var defer = $q.defer();
				defer.reject(validation);
				return defer.promise;
			}

			if ( ! car.hasOwnProperty('id')) {
				return add(car);
			} else {
				return update(car);
			}
		}

		function add(car) {

			var defer = $q.defer();

			car.placa = ForwardAgent.toApi(car.placa);
			car.id = md5.createHash(car.placa);

			/**
			 * Here should be the $http or equivalent integration. Only for test
			 * purposes the application will ADD the item to the reference array
			 * and continue without persist this state.
			 */
			svc.cars.push(car);
			var asyncRes = {
				status: true,
				message: 'Veículo adicionado à frota com sucesso!'
			}

			defer.resolve(asyncRes)
			return defer.promise;
		}

		function update(car) {

			var defer = $q.defer(),
				existent = getBy('id', car.id, svc.cars);

			angular.extend(existent, car)

			/**
			 * Here should be the $http or equivalent integration. Only for test
			 * purposes the application will UPDATE the item to the reference array
			 * and continue without persist this state.
			 */
			var asyncRes = {
				status: true,
				message: 'Veículo atualizado com sucesso!'
			}

			defer.resolve(asyncRes)
			return defer.promise;
		}

		function remove(cars) {

			var defer = $q.defer(),
				_length = svc.cars.length;

			/**
			 * Here should be the $http or equivalent integration. Only for test
			 * purposes the application will REMOVE the item from the reference array
			 * and continue without persist this state.
			 */
			for (var i = _length - 1; i >= 0; i--) {
				if (cars.indexOf(svc.cars[i]) > -1) {
					svc.cars.splice(i, 1);
				}
			}
			var asyncRes = {
				status: true,
				message: 'Veículo removido com sucesso!'
			}

			defer.resolve(asyncRes)
			return defer.promise;
		}

		function resetCar() {
			svc.car = {};
		}

		/**
		 * Private functions (not exposed).
		 */
		function validate(car) {

			var validation = {
				status: true
			};

			/**
			 * Validate Car Plate.
			 */
			var carPlateIsValid = ForwardAgent.validate(car.placa);
			if ( ! carPlateIsValid) {
				validation.status = false;
				validation.message = 'Formato de Placa Inválida!';
				return validation;
			}

			/**
			 * Validate Car Plate.
			 */
			var carPlateExists = existentCarPlateChecking(car, svc.cars);
			if (carPlateExists) {
				validation.status = false;
				validation.message = 'Já existe um veículo cadastrado com esta Placa!';
				return validation;
			}

			return validation;
		}

		function getBy(_field, _val, items) {
			var existent = items.filter(function(item) {
				return item[_field] == _val;
			});
			if (existent.length) {
				return existent[0];
			}
			return null;
		}

		function existentCarPlateChecking(car, cars) {
			var existent = getBy('placa', ForwardAgent.toApi(car.placa), cars);
			if (car.hasOwnProperty('id')) {
				return (existent.id != car.id);
			}
			return existent;
		}

		/**
		 * Return me.
		 *
		 * angular.factory gives the return of function,
		 * instead a NEW instance, like angular.service.
		 */
		return svc;
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.factory('ModalService', ModalService);

	ModalService.$inject = ['$uibModal'];

	function ModalService($uibModal) {

		/**
		 * Me.
		 */
		var svc = {};

		/**
		 * Service properties.
		 */
		svc.modal = {};

		/**
		 * Service methods.
		 */
		svc.open = open;
		svc.close = close;

		/**
		 * Public functions (exposed by methods).
		 */
		function open(modal) {

			angular.extend(svc.modal, modal);

			svc.modal.instance = $uibModal.open({
				animation: false,
				templateUrl: '/views/common/modal.html',
				backdrop: false,
				controller: 'ModalController as modalCtrl'
			});
		}

		function close() {

			svc.modal.instance.close();

			if (svc.modal.afterClose) {
				svc.modal.afterClose()
			}

			init();
		}

		/**
		 * Private functions (not exposed).
		 */
		function init() {
			svc.modal = {
				instance: undefined,
				title: '',
				message: '',
				status: 'info',
				afterClose: undefined
			};
		}

		/**
		 * Main init.
		 */
		init();

		/**
		 * Return me.
		 *
		 * angular.factory gives the return of function,
		 * instead a NEW instance, like angular.service.
		 */
		return svc;
	}

})(window.angular);
