(function(angular) {
  "use strict";

  angular.module('app', [
  	'ui.router',
  	'ui.utils.masks',
  	'angular-table',
  	'ui.bootstrap',
  	'angular-md5'
  ])

})(window.angular);

(function(angular) {
	'use strict';

	var env	= {};

	env.baseUrl = '/api/';

	env.cars = resourceOf('cars')

	angular.module('app').constant('API', env);

	function resourceOf(resourceName) {
		return env.baseUrl + resourceName + '.json';
	}

})(angular);

(function(angular) {
	'use strict';

	var list = ['Gasolina', 'Álcool', 'Diesel', 'Flex'];

	angular.module('app').constant('FUEL_LIST', list);

})(angular);

(function(angular) {
	"use strict";
	angular
		.module('app')
		.config(defineRoutes);

	defineRoutes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];

	function defineRoutes ($stateProvider, $urlRouterProvider, $locationProvider) {
		$locationProvider
			.html5Mode({
				enabled: true,
				requireBase: false
			}).hashPrefix('!');

		$urlRouterProvider.otherwise('/');

		$stateProvider
			.state('home', {
				url:'/',
				views: {
					'': {
						templateUrl: '/views/car/list.html',
						controller: 'ListController as listCtrl',

					},
					'navbar@home': { templateUrl: '/views/common/navbar.html' }
				}
			})
			.state('add', {
				url:'/novo',
				views: {
					'': {
						templateUrl: '/views/car/add.html',
						controller: 'FormController as formCtrl',

					},
					'navbar@add': { templateUrl: '/views/common/navbar.html' }
				}
			})
			.state('update', {
				url:'/editar/:id',
				views: {
					'': {
						templateUrl: '/views/car/add.html',
						controller: 'FormController as formCtrl',

					},
					'navbar@update': { templateUrl: '/views/common/navbar.html' }
				}
			})
	}
})(window.angular);
(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('FormController', FormController);

	FormController.$inject = ['GarageService', 'ModalService', '$state', '$stateParams'];

	function FormController(GarageService, ModalService, $state, $stateParams) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		vm.car = GarageService.car;
		vm.cars = GarageService.cars;

		/**
		 * Controller methods.
		 */
		vm.persist = persist;

		/**
		 * Public functions (exposed by methods).
		 */
		function persist(car) {
			GarageService.persist(car).then(successAddCbk, errorAddCbk);
		}

		/**
		 * Private functions (not exposed).
		 */
		function successAddCbk(res) {
			ModalService.open({
				title: 'Sucesso!',
				message: res.message,
				afterClose: function() {
					$state.go('home');
				}
			})
		}

		function errorAddCbk(res) {
			ModalService.open({
				title: 'Erro!',
				message: res.message,
			})
		}

		GarageService.getAll();
		GarageService.get($stateParams.id);
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('ListController', ListController);

	ListController.$inject = ['GarageService'];

	function ListController(GarageService) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		// vm.car = car;
		vm.cars = GarageService.cars;
		vm.carFilter;

		/**
		 * Controller methods.
		 */
		vm.setCarFilter = setCarFilter;

		/**
		 * Public functions (exposed by methods).
		 */
		function setCarFilter(query) {
			vm.carFilter = query;
		}

		GarageService.getAll();
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.controller('ModalController', ModalController);

	ModalController.$inject = ['ModalService'];

	function ModalController(ModalService) {

		/**
		 * Me.
		 */
		var vm = this;

		/**
		 * Controller properties.
		 */
		vm.title = ModalService.modal.title;
		vm.message = ModalService.modal.message;

		/**
		 * Controller methods.
		 */
		vm.close = ModalService.close;
	}

})(window.angular);

(function(angular) {
	'use strict';

	angular
	.module('app')
	.directive('carForm', carForm)

	carForm.$inject = ['FUEL_LIST'];

	function carForm(FUEL_LIST) {

		return {

			restrict: 'E',
			templateUrl: '/views/directives/car-form.html',
			scope: {
				item: '=',
			},

			link: function($scope, elem, attrs) {
				$scope.fuelList = FUEL_LIST;
			},

			controller: 'FormController as formCtrl'
		};
	}

})(window.angular);

(function(angular) {
	'use strict';

	angular
	.module('app')
	.directive('carList', carList)

	carList.$inject = ['$filter'];

	function carList($filter) {

		return {

			restrict: 'E',
			templateUrl: '/views/directives/car-list.html',
			scope: {
				filter: '=',
				items: '='
			},

			link: function($scope, elem, attrs) {

				$scope.filteredItems = $scope.items;
			},

			controller: function($scope) {

				$scope.$watch('filter', changeFilter)

				function changeFilter(value) {
					$scope.filteredItems = $filter("filter")($scope.items, $scope.filter);
				}
			}
		};
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.service('ApiService', ApiService);

	ApiService.$inject = ['API', '$http'];

	function ApiService (API, $http) {

		/**
		 * Me.
		 */
		var svc = this;

		/**
		 * Service methods.
		 */
		svc.getCars = getCars;
		function getCars() {
			return $http.get(API.cars);
		}

		/**
		 * angular.service returns a NEW INSTANCE,
		 * instead function return, like angular.factory.
		 * This way there's no need to return anything, once
		 * everything appended to 'this' will be available at the instance.
		 */
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.factory('GarageService', GarageService);

	GarageService.$inject = ['ApiService', '$q', 'md5'];

	function GarageService(ApiService, $q, md5) {

		/**
		 * Me.
		 */
		var svc = {};

		/**
		 * Service properties.
		 */
		svc.cars = [];
		svc.car = {};

		/**
		 * Service methods.
		 */
		svc.getAll = getAll;
		svc.get = get;
		svc.persist = persist;

		/**
		 * Public functions (exposed by methods).
		 */
		function getAll(clearCache) {

			var defer = $q.defer();

			if (svc.cars.length && !clearCache) {
				defer.resolve(svc.cars);
				return defer.promise;
			}

			ApiService.getCars().then(function(res){
				angular.copy(res.data, svc.cars);
				svc.cars.forEach(function(car) {
					car.id = md5.createHash(car.placa);
				})
				defer.resolve(svc.cars);
			}, function(res) { console.log(res); defer.reject(res) });

			return defer.promise;
		}

		function get(id) {

			var defer = $q.defer();

			var cars = svc.cars.filter(function(car) {
				return car.id == id;
			});

			if (cars.length) {
				svc.car = cars[0];
			}

			defer.resolve(svc.car);
			return defer.promise;
		}

		function persist(car) {

			if ( ! car.hasOwnProperty('id')) {
				return add(car);
			} else {
				return update(car);
			}
		}

		function add(car) {

			var defer = $q.defer(),
				validation = validate(car);

			if ( ! validation.status) {
				defer.reject(validation.error);
				return defer.promise;
			}

			/**
			 * Here should be the $http or equivalent integration. Only for test
			 * purposes the application will ADD the item to the reference array
			 * and continue without persist.
			 */
			svc.cars.push(car);
			var asyncRes = {
				status: true,
				message: 'Veículo adicionado à frota com sucesso!'
			}

			defer.resolve(asyncRes)
			return defer.promise;
		}

		function update(car) {

			var defer = $q.defer(),
				validation = validate(car);

			if ( ! validation.status) {
				defer.reject(validation.error);
				return defer.promise;
			}

			/**
			 * Here should be the $http or equivalent integration. Only for test
			 * purposes the application will UPDATE the item to the reference array
			 * and continue without persist.
			 */
			var asyncRes = {
				status: true,
				message: 'Veículo atualizado com sucesso!'
			}

			defer.resolve(asyncRes)
			return defer.promise;
		}

		/**
		 * Private functions (not exposed).
		 */
		function validate(car) {

			/**
			 * There's no business rule, validation mock
			 * only for test purposes. Normally this is an
			 * important and required step in a real world application.
			 *
			 * I could pass an objet like
			 * { status: false, message: 'Validation fails at field ...' }
			 */
			var validation = {
				status: true
			}
			return validation;
		}

		/**
		 * Return me.
		 *
		 * angular.factory gives the return of function,
		 * instead a NEW instance, like angular.service.
		 */
		return svc;
	}

})(window.angular);

(function(angular) {
	"use strict";

	angular
		.module('app')
		.factory('ModalService', ModalService);

	ModalService.$inject = ['$uibModal'];

	function ModalService($uibModal) {

		/**
		 * Me.
		 */
		var svc = {};

		/**
		 * Service properties.
		 */
		svc.modal = {};

		/**
		 * Service methods.
		 */
		svc.open = open;
		svc.close = close;

		/**
		 * Public functions (exposed by methods).
		 */
		function open(modal) {

			angular.extend(svc.modal, modal);

			svc.modal.instance = $uibModal.open({
				animation: false,
				templateUrl: '/views/common/modal.html',
				size: 'sm',
				backdrop: false,
				controller: 'ModalController as modalCtrl'
			});
		}

		function close() {

			svc.modal.instance.close();

			if (svc.modal.afterClose) {
				svc.modal.afterClose()
			}

			init();
		}

		/**
		 * Private functions (not exposed).
		 */
		function init() {
			svc.modal = {
				instance: undefined,
				title: '',
				message: '',
				afterClose: undefined
			};
		}

		/**
		 * Main init.
		 */
		init();

		/**
		 * Return me.
		 *
		 * angular.factory gives the return of function,
		 * instead a NEW instance, like angular.service.
		 */
		return svc;
	}

})(window.angular);
